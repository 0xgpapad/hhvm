<?hh

class C { function __toString() { return 'C'; } }

class D { public function __construct(public $x) {} }

class E {
  public int $int = 0;
  public string $string = '';
  public ?arraykey $arraykey = 0;
}

async function eager() {
  return 17;
}

async function lazy() {
  await RescheduleWaitHandle::create(0, 0);
  return 20;
}

function test_allocation($x) {
  return new D(shape('a' => $x));
}

function test_allocation_with_arithmetic($x) {
  return new D(shape('a' => $x + 1));
}

function test_no_return_box($x, $y, $z) {
  return vec[$x, $y];
}

async function test_await($x) {
  $y = $x ? eager() : lazy();
  return await $y;
}

async function test_await_eager_off() {
  $y = await eager();
  var_dump($y);
  return $y;
}

function test_foldable_builtin($x) {
  $y = HH\array_key_cast($x);
  return $y * $y;
}

function test_builtin($xs) {
  sort(inout $xs);
  return $xs;
}

function test_reentry() {
  $x = new C();
  return (string)$x;
}

function test_exception($x, $y) {
  $result = $x + $y;
  try {
    1 / 0;
  } catch (Exception $_) {
    return 'fail';
  }
  return $result;
}

function test_type_constraints(mixed $y, arraykey $x): E {
  $result = new E();
  $result->int = $y;
  $result->string = $x;
  $result->arraykey = $x;
  return $result;
}

class F {
  public function __construct(private int $x) {}
  public function getX(): int { return $this->x; }
}

function test_type_constraints_private(mixed $y): int {
  $f = new F($y);
  return $f->getX();
}

class Box {}


function run_funcs($box, $box1, $box2) {
  var_dump(test_await(true));
  var_dump(test_await(false));
  var_dump(test_await_eager_off());
  var_dump(test_allocation($box));
  var_dump(test_allocation_with_arithmetic($box));
  var_dump(test_no_return_box($box, $box1, $box2));
  var_dump(test_foldable_builtin(17));
  var_dump(test_builtin(vec['z', 'w']));
  var_dump(test_reentry());
  var_dump(test_exception(17, 34));
  var_dump(test_type_constraints($box, $box1));
  var_dump(test_type_constraints_private($box));
}

<<__EntryPoint>>
function main() {
  print("Trying direct calls:\n\n");
  var_dump(test_builtin(vec['z', 'w']));
  var_dump(test_reentry());
  var_dump(test_allocation(17));

  print("\nTrying inline interp:\n\n");
  run_funcs(17, 'x', new C());
}
