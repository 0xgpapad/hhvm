<?hh

class C { function __toString() { return 'C'; } }

class D { public function __construct(public $x)[] {} }

class E {
  public int $int = 0;
  public string $string = '';
  public ?arraykey $arraykey = 0;
}

class F {
  function test_static(mixed $x) { return vec[$this, $x]; }
  function test_dynamic(mixed $x) { return vec[$this, $x]; }
}

class G extends F {
  function test_dynamic(mixed $x) { return vec[$this, $x, 17]; }
}

async function eager() {
  return 17;
}

function lazy() {
  return RescheduleWaitHandle::create(0, 0);
}

function test_allocation($x) {
  return new D(shape('a' => $x));
}

function test_allocation_with_arithmetic($x) {
  return new D(shape('a' => $x + 1));
}

function test_no_return_box($x, $y, $z) {
  return vec[$x, $y];
}

async function test_await($x) {
  $y = $x ? eager() : lazy();
  return await $y;
}

function test_foldable_builtin($x) {
  $y = HH\array_key_cast($x);
  return $y * $y;
}

function test_builtin($xs) {
  sort(inout $xs);
  return $xs;
}

function test_reentry() {
  $x = new C();
  return (string)$x;
}

function test_exception($x, $y) {
  $result = $x + $y;
  try {
    1 / 0;
  } catch (Exception $_) {
    return 'fail';
  }
  return $result;
}

function test_type_constraints(arraykey $x, mixed $y): E {
  $result = new E();
  $result->int = $y;
  $result->string = $x;
  $result->arraykey = $x;
  return $result;
}

function test_function_call($x, $y) {
  return test_type_constraints($x, $y);
}

function test_instance_method_static($f, $g) {
  return $f->test_static($g);
}

function test_instance_method_dynamic($f, $g) {
  return $f->test_dynamic($g);
}

function try_render($rom) {
  if ($rom) {
    var_dump(__hhvm_intrinsics\render_rom($rom, vec['x', 17, new C()]));
  }
}

<<__EntryPoint>>
function main() {
  print("Trying direct calls:\n\n");
  var_dump(test_builtin(vec['z', 'w']));
  var_dump(test_reentry());
  var_dump(test_allocation(17));

  print("\nTrying inline interp:\n\n");
  $box = __hhvm_intrinsics\new_mystery_box();
  $box1 = __hhvm_intrinsics\new_mystery_box();
  $box2 = __hhvm_intrinsics\new_mystery_box();
  $rom = __hhvm_intrinsics\run_inline_interp(test_await<>, null, vec[true]);
  try_render($rom);
  $rom = __hhvm_intrinsics\run_inline_interp(test_await<>, null, vec[false]);
  try_render($rom);
  $rom = __hhvm_intrinsics\run_inline_interp(test_allocation<>, null, vec[$box]);
  try_render($rom);
  $rom = __hhvm_intrinsics\run_inline_interp(test_allocation_with_arithmetic<>, null, vec[$box]);
  try_render($rom);
  $rom = __hhvm_intrinsics\run_inline_interp(test_no_return_box<>, null, vec[$box, $box1, $box2]);
  try_render($rom);
  $rom = __hhvm_intrinsics\run_inline_interp(test_foldable_builtin<>, null, vec['hello']);
  try_render($rom);
  $rom = __hhvm_intrinsics\run_inline_interp(test_builtin<>, null, vec[vec['z', 'w']]);
  try_render($rom);
  $rom = __hhvm_intrinsics\run_inline_interp(test_reentry<>, null, vec[]);
  try_render($rom);
  $rom = __hhvm_intrinsics\run_inline_interp(test_exception<>, null, vec[17, 34]);
  try_render($rom);
  $rom = __hhvm_intrinsics\run_inline_interp(test_type_constraints<>, null, vec[$box, $box]);
  try_render($rom);
  $rom = __hhvm_intrinsics\run_inline_interp(test_function_call<>, null, vec[$box, $box]);
  try_render($rom);

  $cls = __hhvm_intrinsics\new_mystery_box('Obj=F');
  $subcls = __hhvm_intrinsics\new_mystery_box('Obj<=F');
  $rom = __hhvm_intrinsics\run_inline_interp(test_instance_method_static<>, null, vec[$cls, $box]);
  try_render($rom);
  $rom = __hhvm_intrinsics\run_inline_interp(test_instance_method_static<>, null, vec[$subcls, $box]);
  try_render($rom);
  $rom = __hhvm_intrinsics\run_inline_interp(test_instance_method_dynamic<>, null, vec[$cls, $box]);
  try_render($rom);
  $rom = __hhvm_intrinsics\run_inline_interp(test_instance_method_dynamic<>, null, vec[$subcls, $box]);
  try_render($rom);
}
