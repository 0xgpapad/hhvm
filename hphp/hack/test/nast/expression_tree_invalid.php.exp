[(Fun
    { fd_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
        ns_record_def_uses = <opaque>; ns_fun_uses = <opaque>; ns_const_uses = <opaque>; 
        ns_name = None; ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
      fd_file_attributes = []; fd_mode = Mstrict;
      fd_fun =
      { f_span = [3:1-6:2]; f_readonly_this = None; f_annotation = (); 
        f_readonly_ret = None; f_ret = ((), (Some ([3:18-22], (Hprim Tvoid)))); 
        f_name = ([3:10-14], "\\test"); f_tparams = []; f_where_constraints = []; 
        f_variadic = FVnonVariadic; f_params = []; f_ctxs = None; f_unsafe_ctxs = None;
        f_body =
        { fb_ast =
          [([5:3-16],
            (Expr
               ((), [5:3-15],
                (ExpressionTree
                   { et_hint = ([5:3-7], (Happly (([5:3-7], "\\Code"), []))); 
                     et_splices = []; et_function_pointers = [];
                     et_virtualized_expr =
                     ((), [5:8-14],
                      (Call (
                         ((), [5:8-14],
                          (Efun (
                             { f_span = [5:8-14]; f_readonly_this = None; 
                               f_annotation = (); f_readonly_ret = None; 
                               f_ret = ((), None); f_name = ([5:8-14], ";anonymous"); 
                               f_tparams = []; f_where_constraints = []; 
                               f_variadic = FVnonVariadic; f_params = []; 
                               f_ctxs = None; f_unsafe_ctxs = None;
                               f_body =
                               { fb_ast =
                                 [([5:8-14],
                                   (Return
                                      (Some ((), [5:8-14],
                                             (Call (
                                                ((), [5:8-14],
                                                 (Obj_get (((), [5:8-9], (Call (((), [5:8-9], (Class_const (((), [5:8-9], (CI ([5:8-9], "\\Code"))), ([5:8-9], "intType")))), [], [], None))),
                                                    ((), [5:8-14], (Id ([5:8-14], "__unsupported"))), OG_nullthrows, Is_method))),
                                                [],
                                                [(Pnormal, ((), [5:13-14], (Call (((), [5:13-14], (Class_const (((), [5:13-14], (CI ([5:13-14], "\\Code"))), ([5:13-14], "intType")))), [], [], None))))
                                                  ],
                                                None))))))
                                   ]
                                 };
                               f_fun_kind = FSync; f_user_attributes = []; 
                               f_external = false; f_doc_comment = None },
                             []))),
                         [], [], None)));
                     et_runtime_expr =
                     ((), [5:8-14],
                      (Call (((), [5:8-14], (Class_const (((), [5:8-14], (CI ([5:8-14], "\\Code"))), ([5:8-14], "makeTree")))), 
                         [],
                         [(Pnormal,
                           ((), [5:8-14],
                            (Shape
                               [((SFlit_str ([5:8-14], "path")), ((), [5:8-14], (Id ([5:8-14], "\\__FILE__")))); (
                                 (SFlit_str ([5:8-14], "start_line")), ((), [5:8-14], (Int "5"))); (
                                 (SFlit_str ([5:8-14], "end_line")), ((), [5:8-14], (Int "5"))); (
                                 (SFlit_str ([5:8-14], "start_column")), ((), [5:8-14], (Int "7"))); (
                                 (SFlit_str ([5:8-14], "end_column")), ((), [5:8-14], (Int "13")))])));
                           (Pnormal,
                            ((), [5:8-14],
                             (Shape
                                [((SFlit_str ([5:8-14], "splices")), ((), [5:8-14], (KeyValCollection (Dict, None, []))));
                                  ((SFlit_str ([5:8-14], "functions")), ((), [5:8-14], (ValCollection (Vec, None, []))));
                                  ((SFlit_str ([5:8-14], "static_methods")), ((), [5:8-14], (ValCollection (Vec, None, []))))])));
                           (Pnormal,
                            ((), [5:8-14],
                             (Lfun (
                                { f_span = [5:8-14]; f_readonly_this = None; 
                                  f_annotation = (); f_readonly_ret = None; 
                                  f_ret = ((), None); f_name = ([5:8-14], ";anonymous"); 
                                  f_tparams = []; f_where_constraints = []; 
                                  f_variadic = FVnonVariadic;
                                  f_params =
                                  [{ param_annotation = (); param_type_hint = ((), (Some ([5:3-7], (Happly (([5:3-7], "\\Code"), []))))); 
                                     param_is_variadic = false; param_pos = [5:3-7]; 
                                     param_name = "$0v"; param_expr = None; 
                                     param_readonly = None; param_callconv = Pnormal; 
                                     param_user_attributes = []; param_visibility = None }
                                    ];
                                  f_ctxs = None; f_unsafe_ctxs = None;
                                  f_body =
                                  { fb_ast =
                                    [([5:8-14],
                                      (Return
                                         (Some ((), [5:8-14],
                                                (Call (((), [5:8-14], (Obj_get (((), [5:8-14], (Lvar ([5:8-14], $0v))), ((), [5:8-14], (Id ([5:8-14], "visitBinop"))), OG_nullthrows, Is_method))), 
                                                   [],
                                                   [(Pnormal,
                                                     ((), [5:8-14],
                                                      (Shape
                                                         [((SFlit_str ([5:8-14], "path")), ((), [5:8-14], (Id ([5:8-14], "\\__FILE__"))));
                                                           ((SFlit_str ([5:8-14], "start_line")), ((), [5:8-14], (Int "5"))); (
                                                           (SFlit_str ([5:8-14], "end_line")), ((), [5:8-14], (Int "5"))); (
                                                           (SFlit_str ([5:8-14], "start_column")), ((), [5:8-14], (Int "7"))); (
                                                           (SFlit_str ([5:8-14], "end_column")), ((), [5:8-14], (Int "13")))])));
                                                     (Pnormal,
                                                      ((), [5:8-9],
                                                       (Call (((), [5:8-9], (Obj_get (((), [5:8-9], (Lvar ([5:8-9], $0v))), ((), [5:8-9], (Id ([5:8-9], "visitInt"))), OG_nullthrows, Is_method))), 
                                                          [],
                                                          [(Pnormal,
                                                            ((), [5:8-9],
                                                             (Shape
                                                                [((SFlit_str ([5:8-9], "path")), ((), [5:8-9], (Id ([5:8-9], "\\__FILE__"))));
                                                                  ((SFlit_str ([5:8-9], "start_line")), ((), [5:8-9], (Int "5"))); (
                                                                  (SFlit_str ([5:8-9], "end_line")), ((), [5:8-9], (Int "5"))); (
                                                                  (SFlit_str ([5:8-9], "start_column")), ((), [5:8-9], (Int "7"))); (
                                                                  (SFlit_str ([5:8-9], "end_column")), ((), [5:8-9], (Int "8")))])));
                                                            (Pnormal, ((), [5:8-9], (Int "1")))],
                                                          None))));
                                                     (Pnormal, ((), [5:8-14], (String "__unsupported")));
                                                     (Pnormal,
                                                      ((), [5:13-14],
                                                       (Call (
                                                          ((), [5:13-14], (Obj_get (((), [5:13-14], (Lvar ([5:13-14], $0v))), ((), [5:13-14], (Id ([5:13-14], "visitInt"))), OG_nullthrows, Is_method))),
                                                          [],
                                                          [(Pnormal,
                                                            ((), [5:13-14],
                                                             (Shape
                                                                [((SFlit_str ([5:13-14], "path")), ((), [5:13-14], (Id ([5:13-14], "\\__FILE__"))));
                                                                  ((SFlit_str ([5:13-14], "start_line")), ((), [5:13-14], (Int "5")));
                                                                  ((SFlit_str ([5:13-14], "end_line")), ((), [5:13-14], (Int "5")));
                                                                  ((SFlit_str ([5:13-14], "start_column")), ((), [5:13-14], (Int "12")));
                                                                  ((SFlit_str ([5:13-14], "end_column")), ((), [5:13-14], (Int "13")))])));
                                                            (Pnormal, ((), [5:13-14], (Int "2")))],
                                                          None))))
                                                     ],
                                                   None))))))
                                      ]
                                    };
                                  f_fun_kind = FSync; f_user_attributes = []; 
                                  f_external = false; f_doc_comment = None },
                                []))))
                           ],
                         None)));
                     et_dollardollar_pos = None }))))
            ]
          };
        f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
        f_doc_comment = None }
      })
  ]
