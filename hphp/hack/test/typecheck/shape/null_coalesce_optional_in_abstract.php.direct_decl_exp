--- legacy
+++ direct decl
@@ -1,152 +1,152 @@
 [("\\Foo",
   (Shallow_decl_defs.Class
      { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
        sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cabstract;
        sc_name = ([2:16-19], "\\Foo"); sc_tparams = [];
        sc_where_constraints = []; sc_extends = []; sc_uses = [];
        sc_xhp_attr_uses = []; sc_req_extends = []; sc_req_implements = [];
        sc_implements = []; sc_implements_dynamic = false; sc_consts = [];
        sc_typeconsts =
        [{ Shallow_decl_defs.stc_abstract = (Typing_defs.TCAbstract None);
           stc_as_constraint =
           (Some (Rhint (root|null_coalesce_optional_in_abstract.php line 3, characters 31-67),
                  (Tshape (Typing_defs_core.Open_shape,
                     { (Typing_defs_core.TSFlit_str ([4:6-11], "foo")) ->
                       { sft_optional = true;
                         sft_ty =
                         (Rhint (root|null_coalesce_optional_in_abstract.php line 4, characters 15-17),
                          (Tprim Tint))
                         } }
                     ))));
           stc_name = ([3:23-27], "TFoo"); stc_type = None;
           stc_enforceable = ([Pos.none], false); stc_reifiable = None }
          ];
        sc_props = []; sc_sprops = []; sc_constructor = None;
        sc_static_methods =
        [{ Shallow_decl_defs.sm_name = ([7:35-41], "getFoo");
           sm_type =
           (Rwitness (root|null_coalesce_optional_in_abstract.php line 7, characters 35-40),
            (Tfun
               { ft_arity = (Fstandard ()); ft_tparams = [];
                 ft_where_constraints = []; ft_params = [];
                 ft_implicit_params = { capability = (CapDefaults [7:35-41]) };
                 ft_ret =
                 { et_enforced = false;
                   et_type =
                   (Rhint (root|null_coalesce_optional_in_abstract.php line 7, characters 45-54),
                    (Taccess
                       ((Rhint (root|null_coalesce_optional_in_abstract.php line 7, characters 45-54),
                         Tthis),
                        [([7:51-55], "TFoo")])))
                   };
                 ft_flags =
                 (make_ft_flags FSync ~return_disposable:false
                   ~returns_readonly:false ~readonly_this:false
                   ~is_const:false);
                 ft_ifc_decl = FDPolicied {PUBLIC} }));
           sm_visibility = Public; sm_deprecated = None; sm_flags = abstract }
          ];
        sc_methods = []; sc_user_attributes = []; sc_enum_type = None }));
   ("\\Bar",
    (Shallow_decl_defs.Class
       { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
         sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cnormal;
         sc_name = ([10:7-10], "\\Bar"); sc_tparams = [];
         sc_where_constraints = [];
         sc_extends =
         [(Rhint (root|null_coalesce_optional_in_abstract.php line 10, characters 19-21),
           (Tapply (([10:19-22], "\\Foo"), [])))];
         sc_uses = []; sc_xhp_attr_uses = []; sc_req_extends = [];
         sc_req_implements = []; sc_implements = [];
         sc_implements_dynamic = false; sc_consts = [];
         sc_typeconsts =
         [{ Shallow_decl_defs.stc_abstract = Typing_defs.TCConcrete;
            stc_as_constraint = None; stc_name = ([11:14-18], "TFoo");
            stc_type =
            (Some (Rhint (root|null_coalesce_optional_in_abstract.php line 11, characters 21-57),
                   (Tshape (Typing_defs_core.Open_shape,
                      { (Typing_defs_core.TSFlit_str ([12:6-11], "foo")) ->
                        { sft_optional = true;
                          sft_ty =
                          (Rhint (root|null_coalesce_optional_in_abstract.php line 12, characters 15-17),
                           (Tprim Tint))
                          } }
                      ))));
            stc_enforceable = ([Pos.none], false); stc_reifiable = None }
           ];
         sc_props = []; sc_sprops = []; sc_constructor = None;
         sc_static_methods =
         [{ Shallow_decl_defs.sm_name = ([15:26-32], "getFoo");
            sm_type =
            (Rwitness (root|null_coalesce_optional_in_abstract.php line 15, characters 26-31),
             (Tfun
                { ft_arity = (Fstandard ()); ft_tparams = [];
                  ft_where_constraints = []; ft_params = [];
                  ft_implicit_params =
                  { capability = (CapDefaults [15:26-32]) };
                  ft_ret =
                  { et_enforced = false;
                    et_type =
                    (Rhint (root|null_coalesce_optional_in_abstract.php line 15, characters 36-45),
                     (Taccess
                        ((Rhint (root|null_coalesce_optional_in_abstract.php line 15, characters 36-45),
                          Tthis),
                         [([15:42-46], "TFoo")])))
                    };
                  ft_flags =
                  (make_ft_flags FSync ~return_disposable:false
                    ~returns_readonly:false ~readonly_this:false
                    ~is_const:false);
                  ft_ifc_decl = FDPolicied {PUBLIC} }));
            sm_visibility = Public; sm_deprecated = None; sm_flags = (empty) }
           ];
         sc_methods = []; sc_user_attributes = []; sc_enum_type = None }));
   ("\\Baz",
    (Shallow_decl_defs.Class
       { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
         sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cnormal;
         sc_name = ([20:7-10], "\\Baz"); sc_tparams = [];
         sc_where_constraints = []; sc_extends = []; sc_uses = [];
         sc_xhp_attr_uses = []; sc_req_extends = []; sc_req_implements = [];
         sc_implements = []; sc_implements_dynamic = false;
         sc_consts =
         [{ Shallow_decl_defs.scc_abstract = false;
            scc_name = ([21:29-33], "FOOS");
            scc_type =
            (Rhint (root|null_coalesce_optional_in_abstract.php line 21, characters 9-27),
             (Tapply (([21:9-12], "\\HH\\vec"),
                [(Rhint (root|null_coalesce_optional_in_abstract.php line 21, characters 13-26),
                  (Tapply (([21:13-22], "\\HH\\classname"),
                     [(Rhint (root|null_coalesce_optional_in_abstract.php line 21, characters 23-25),
                       (Tapply (([21:23-26], "\\Foo"), [])))]
                     )))
                  ]
                )));
-           scc_refs = [((Aast_defs.From "\\Bar"), "class")] }
+           scc_refs = [] }
           ];
         sc_typeconsts = []; sc_props = []; sc_sprops = [];
         sc_constructor = None;
         sc_static_methods =
         [{ Shallow_decl_defs.sm_name = ([22:26-31], "bazzy");
            sm_type =
            (Rwitness (root|null_coalesce_optional_in_abstract.php line 22, characters 26-30),
             (Tfun
                { ft_arity = (Fstandard ()); ft_tparams = [];
                  ft_where_constraints = []; ft_params = [];
                  ft_implicit_params =
                  { capability = (CapDefaults [22:26-31]) };
                  ft_ret =
                  { et_enforced = false;
                    et_type =
                    (Rhint (root|null_coalesce_optional_in_abstract.php line 22, characters 35-38),
                     (Tprim Tvoid))
                    };
                  ft_flags =
                  (make_ft_flags FSync ~return_disposable:false
                    ~returns_readonly:false ~readonly_this:false
                    ~is_const:false);
                  ft_ifc_decl = FDPolicied {PUBLIC} }));
            sm_visibility = Public; sm_deprecated = None; sm_flags = (empty) }
           ];
         sc_methods = []; sc_user_attributes = []; sc_enum_type = None }))
   ]
